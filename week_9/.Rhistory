knitr::opts_chunk$set(echo=TRUE,message=FALSE,warning=FALSE,cache=TRUE,autodep=TRUE,cache.comments=FALSE)
library(tidyverse)
library(lubridate)
source("C:/stat_240/scripts/viridis.R")
source("C:/stat_240/scripts/ggprob.R")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(tidyverse)
source("C:/stat_240/scripts/viridis.R")
source("C:/stat_240/scripts/ggprob.R")
knitr::opts_chunk$set(echo=TRUE,message=FALSE,warning=FALSE,cache=TRUE,autodep=TRUE,cache.comments=FALSE)
library(tidyverse)
library(lubridate)
source("C:/stat_240/scripts/viridis.R")
source("C:/stat_240/scripts/ggprob.R")
gbinom(90,0.5,scale=TRUE, size = 2) +
geom_vline(xintercept=60,color="red",
linetype="dashed", size = 2) +
theme_bw()
tol <- 1.0e-07 ## 10 ^(-7)
x <- 0:90
x_extreme <- x[dbinom(x,90,0.5) < dbinom(60,90,0.5) + tol]
x_extreme
p_value <- sum(dbinom(x_extreme,90,0.5))
p_value
pbinom(59,90,.5,lower.tail=FALSE)*2 # P(X > 59) = P(X >= 60)
pbinom(30,90,.5,lower.tail=TRUE)*2  # P(X <= 30)
knitr::opts_chunk$set(echo=TRUE,message=FALSE,warning=FALSE,cache=TRUE,autodep=TRUE,cache.comments=FALSE)
library(tidyverse)
library(lubridate)
source("../../scripts/viridis.R")
knitr::opts_chunk$set(echo=TRUE,message=FALSE,warning=FALSE,cache=TRUE,autodep=TRUE,cache.comments=FALSE)
library(tidyverse)
library(lubridate)
source("C:/stat_240/scripts/viridis.R")
source("C:/stat_240/scripts/ggprob.R")
knitr::opts_chunk$set(echo=TRUE,message=FALSE,warning=FALSE,cache=TRUE,autodep=TRUE,cache.comments=FALSE)
library(tidyverse)
library(lubridate)
source("C:/stat_240/scripts/viridis.R")
source("C:/stat_240/scripts/ggprob.R")
tol <- 1.0e-07 ## 10 ^(-7)
x <- 0:90
x_extreme <- x[dbinom(x,90,0.5) < dbinom(60,90,0.5) + tol]
x_extreme
p_value <- sum(dbinom(x_extreme,90,0.5))
p_value
pbinom(59,90,.5,lower.tail=FALSE)*2
pbinom(30,90,.5,lower.tail=TRUE)*2
knitr::opts_chunk$set(echo=TRUE,message=FALSE,warning=FALSE,cache=TRUE,autodep=TRUE,cache.comments=FALSE)
library(tidyverse)
library(lubridate)
source("C:/stat_240/scripts/viridis.R")
source("C:/stat_240/scripts/ggprob.R")
gbinom(90,0.5,scale=TRUE, size = 2) +
geom_vline(xintercept=60,color="red",
linetype="dashed", size = 2) +
theme_bw()
tol <- 1.0e-07 ## 10 ^(-7)
x <- 0:90
x_extreme <- x[dbinom(x,90,0.5) < dbinom(60,90,0.5) + tol]
x_extreme
p_value <- sum(dbinom(x_extreme,90,0.5))   #probability mass function
p_value
pbinom(59,90,.5,lower.tail=FALSE)*2 # P(X > 59) = P(X >= 60)
pbinom(30,90,.5,lower.tail=TRUE)*2  # P(X <= 30)
gbinom(200,0.2,scale=TRUE, size = 2) +
geom_vline(xintercept=50,color="red",
linetype="dashed", size = 2) +
theme_bw()
p_value <- pbinom(49,200,.2,lower.tail=FALSE) # P(X > 49) = P(X >= 50)
p_value
chimps <- read_csv("C:/stat_240/data/chimpanzee.csv") %>%
mutate(with_partner = case_when(
partner == "none" ~ FALSE,
TRUE ~ TRUE)) %>%
select(actor,partner,with_partner,everything())
chimps
chimp_c <- chimps %>%
filter(actor == "C") %>%
group_by(with_partner) %>%
summarize(prosocial = sum(prosocial),
selfish = sum(selfish),
n = prosocial + selfish,
p_hat = prosocial / n)
chimp_c
chimp_c <- chimp_c %>%
mutate(p_tilde = (prosocial+2)/(n+4),
se = sqrt(p_tilde*(1-p_tilde)/(n+4)))
## 95% CI for difference in proportions
est_c_diff <- chimp_c$p_tilde[2] - chimp_c$p_tilde[1]
est_c_diff
se_c_diff <- sqrt(chimp_c$se[1]^2 + chimp_c$se[2]^2)
se_c_diff
z <- qnorm(0.975)
ci_c_diff <- est_c_diff + c(-1,1) * z * se_c_diff
ci_c_diff
chimp_c
chimp_c$p_hat[2]
chimp_c$p_hat[1]
df <- tibble( ## data frame with our simulated sample proportions and differences
p_hat_1 = rbinom(N,90,chimp_c$p_hat[2]) / 90,
p_hat_2 = rbinom(N,30,chimp_c$p_hat[1]) / 30,
diff = p_hat_1 - p_hat_2)
N <- 100000 ## number of repetitions
df <- tibble( ## data frame with our simulated sample proportions and differences
p_hat_1 = rbinom(N,90,chimp_c$p_hat[2]) / 90,
p_hat_2 = rbinom(N,30,chimp_c$p_hat[1]) / 30,
diff = p_hat_1 - p_hat_2)
df
ci_rand <- df %>% ## estimate the confidence interval
summarize(se = sd(diff), ## standard deviation of the differences
est = chimp_c$p_hat[2] - chimp_c$p_hat[1],  ## our estimated difference
z = qnorm(0.975),  ## the normal quantile for a 95% CI
a = est - z*se,  ## lower bound on interval
b = est + z*se)
ci_rand
ggplot(df, aes(x=diff)) +
geom_density(color="magenta") +
geom_norm_density(mu = mean(df$diff), sigma = sd(df$diff), color="blue", linetype="dashed") +
theme_bw()
## examine approximate normal assumption
ggplot(df, aes(x=diff)) +
geom_density(color="magenta") +
geom_norm_density(mu = mean(df$diff), sigma = sd(df$diff), color="blue", linetype="dashed")
## examine approximate normal assumption
ggplot(df, aes(x=diff)) +
geom_density(color="magenta") +
geom_norm_density(mu = mean(df$diff), sigma = sd(df$diff), color="blue", linetype="dashed") +
theme_bw()
## examine approximate normal assumption
ggplot(df, aes(x=diff)) +
geom_density(color="magenta") +
geom_norm_density(mu = mean(df$diff), sigma = sd(df$diff), color="blue", linetype="dashed")
## examine approximate normal assumption
ggplot(df, aes(x=diff)) +
geom_density(color="magenta") +
geom_norm_density(mu = mean(df$diff), sigma = sd(df$diff), color="blue", linetype="dashed") +
theme_bw()
df_d <- chimp_c %>%
ungroup()
df_d
df_d <- chimp_c
df_d
df_d <- chimp_c %>%
ungroup()
df_d
df_d <- chimp_c %>%
ungroup() %>%
summarize(est = p_hat[2] - p_hat[1], ## point estimate of difference
prosocial = sum(prosocial), ## total pro-social choices
n_1 = n[2],
n_2 = n[1],
n = sum(n),
p_pool = prosocial/n, ## point estimate under null hypothesis
se_pool = sqrt(p_pool*(1-p_pool)*(1/n_1 + 1/n_2)), ## standard error under null hypothesis
z = est / se_pool,  ## test statistic
p_value = 2*pnorm(-abs(z)))
df_d
N <-  100000  ## number of repetitions
df_e <- tibble(
p_hat_1 = rbinom(N,90,df_d$p_pool) / 90,
p_hat_2 = rbinom(N,30,df_d$p_pool) / 30,
diff = p_hat_1 - p_hat_2,
extreme = abs(diff) >= abs(df_d$est)) ## compare simulated differences to our observed difference
p_value_e <- mean(df_e$extreme)
p_value_e
extreme
extreme = abs(diff) >= abs(df_d$est))
p_value_e
ggplot(df_e, aes(x=diff)) +
geom_density() +
geom_norm_density(mu = mean(df_e$diff), sd(df_e$diff)) +
theme_bw()
chimps %>%
distinct(actor)
df_2 <- chimps %>%
filter(with_partner == TRUE) %>%
group_by(actor) %>%
summarize(prosocial = sum(prosocial),
selfish = sum(selfish),
n = prosocial + selfish,
p_hat = prosocial/n)
df_2
df_2 <- chimps %>%
filter(with_partner == TRUE) %>%
group_by(actor) %>%
summarize(prosocial = sum(prosocial),
selfish = sum(selfish),
n = prosocial + selfish,
p_hat = prosocial/n)
df_2
## p_hat under null
df_2_0 <- df_2 %>%
ungroup() %>%
summarize(prosocial = sum(prosocial),
selfish = sum(selfish),
n = prosocial + selfish,
p_hat = prosocial/n)
df_2_0
df_2 <- df_2 %>%
mutate(p_0 = sum(prosocial)/sum(n)) %>%
mutate(log_L0 = dbinom(prosocial,n,p_0,log=TRUE),
log_L1 = dbinom(prosocial,n,p_hat,log=TRUE))
df_2
df_2 <- df_2 %>%
mutate(p_0 = sum(prosocial)/sum(n)) %>%
mutate(log_L0 = dbinom(prosocial,n,p_0,log=TRUE),
log_L1 = dbinom(prosocial,n,p_hat,log=TRUE))
lrt <- df_2 %>%
summarize(log_L0 = sum(log_L0),
log_L1 = sum(log_L1),
lrt = 2*(log_L1 - log_L0),
R = exp(log_L0-log_L1))
lrt
gchisq(6)
gchisq(6) +
geom_chisq_fill(df=6,a=lrt$lrt,b=qchisq(0.9999,6),fill="magenta") +
theme_bw()
lrt <- lrt %>%
mutate(p_value = 1 - pchisq(lrt,6))
lrt
lrt_stat <- function(df){ ## Calculate the LRT statistic
df <- df %>%
mutate(p_0 = sum(prosocial)/sum(n),
p_hat = prosocial/n,
log_L0 = dbinom(prosocial,n,p_0,log=TRUE),
log_L1 = dbinom(prosocial,n,p_hat,log=TRUE)) %>%
summarize(lrt = 2*(sum(log_L1) - sum(log_L0)))
return( df$lrt )
}
### Test this with our df_2 from earlier; we should get 9.563735
lrt_stat(df_2)
lrt_stat_vector <- function(df)
{
x <- df$prosocial
n <- df$n
p_0 <- sum(x)/sum(n)
p_hat <- x/n
log_L0 <- sum(dbinom(x,n,p_0,log=TRUE))
log_L1 <- sum(dbinom(x,n,p_hat,log=TRUE))
return( 2*(log_L1 - log_L0) )
}
lrt_stat_vector(df_2)
## Test the time for the dplyr and vector versions of the
##   functions to calculate the test statistic
system.time( {for(i in 1:1000) lrt_stat(df_2)} )
system.time( {for(i in 1:1000) lrt_stat_vector(df_2)} )
lrt_randomization <- function(df,N=100000)
{
m <- nrow(df)
p_0 <- df %>%
summarize(p_0 = sum(prosocial)/sum(n)) %>%
pull(p_0)
lrt <- numeric(N)
for ( i in 1:N )
{
df_rand <- df %>%
mutate(prosocial = rbinom(m,n,p_0))
lrt[i] = lrt_stat_vector(df_rand)
}
return( lrt )
}
lrt <- df_2 %>%
select(prosocial,n) %>%
lrt_randomization()
lrt_0 <- lrt_stat(df_2)
p_value <- mean(lrt >= lrt_0)
signif(p_value,4)
# 0.1481
## Compare
signif(1 - pchisq(lrt_0,6),4)
## Check plot
df_lrt <- tibble(lrt)
ggplot(df_lrt, aes(x=lrt)) +
geom_density(color="magenta",size=3) +
geom_chisq_fill(df=6,a=lrt_0, fill="cyan") +
geom_chisq_density(df=6, color="blue", size=2) +
theme_bw()
