knitr::opts_chunk$set(echo=TRUE,message=FALSE,warning=FALSE,cache=TRUE,autodep=TRUE,cache.comments=FALSE)
library(tidyverse)
library(lubridate)
df1 <- read_delim("C:/stat_240/week4/readr_example.txt", delim="$")
df1 <- read_delim("C:/stat_240/week_4/readr_example.txt", delim="$")
df1
df2 <- read_delim("C:/stat_240/week_4/readr_example.txt", delim="!")
df2
df3 <- read_csv("C:/stat_240/week_4/readr_example.txt")
df3
colnames(df1)
colnames(df1) <- c("a", "b", "c", "d")
colnames(df1)
df4 <- read_delim("C:/stat_240/week_4/readr_example.txt", delim="$", skip=1)
df4
df5 <- read_delim("C:/stat_240/week_4/readr_example.txt", delim="$", skip=1, col_names = FALSE)
df5
colnames(df5) <- c("a", "b", "c", "d")
df5
# Uses the ISO 8601 format where components of a specified date are arranged
# from biggest to smallest: year, month, day, hour, minute, second
date1 <- "February 5 2017"
class(date1)
mdy(date1)
class(mdy(date1))
date2 <- "5-2-2017"
date3 <- "2017, February 5"
date4 <- "2.2017.5"
dmy(date2)
mdy(date2) # changed month and day
ymd(date3)
myd(date4)
test_date <- mdy(date1)
test_date
year(test_date)
month(test_date)
month(test_date, label=TRUE)
month(test_date, label=TRUE, abbr=FALSE)
day(test_date)
wday(test_date)
wday(test_date, label=TRUE)
wday(test_date, label=TRUE, abbr=FALSE)
wday(test_date, label=TRUE)
wday(test_date, label=TRUE, abbr=FALSE)
test_date <- mdy(date1)
test_date
year(test_date)
month(test_date)
month(test_date, label=TRUE)
month(test_date, label=TRUE, abbr=FALSE)
day(test_date)
wday(test_date)
wday(test_date, label=TRUE)
wday(test_date, label=TRUE, abbr=FALSE)
* The following data files will be used and are assumed to be located two steps back from the working directory in a folder called `data/`.  Be sure to adjust the code if you have the data files in a different location.
`"C:/stat240/data/DEN-2018.html"`
`"C:/stat240/data/JFK-2018.html"`
`"C:/stat240/data/LAX-2018.html"`
`"C:/stat240/data/MSP-2018.html"`
`"C:/stat240/data/ORD-2018.html"`
`"C:/stat240/data/SFO-2018.html"`
* The following data files will be used and are assumed to be located two steps back from the working directory in a folder called `data/`.  Be sure to adjust the code if you have the data files in a different location.
`"C:/stat_240/data/DEN-2018.html"`
`"C:/stat_240/data/JFK-2018.html"`
`"C:/stat_240/data/LAX-2018.html"`
`"C:/stat_240/data/MSP-2018.html"`
`"C:/stat_240/data/ORD-2018.html"`
`"C:/stat_240/data/SFO-2018.html"`
* The following data files will be used and are assumed to be located two steps back from the working directory in a folder called `data/`.  Be sure to adjust the code if you have the data files in a different location.
`"C:/stat_240/data/DEN-2018.html"`
`"C:/stat_240/data/JFK-2018.html"`
`"C:/stat_240/data/LAX-2018.html"`
`"C:/stat_240/data/MSP-2018.html"`
`"C:/stat_240/data/ORD-2018.html"`
`"C:/stat_240/data/SFO-2018.html"`
* The following data files will be used and are assumed to be located two steps back from the working directory in a folder called `data/`.  Be sure to adjust the code if you have the data files in a different location.
`"C:/stat_240/data/DEN-2018.html"`
`"C:/stat_240/data/JFK-2018.html"`
`"C:/stat_240/data/LAX-2018.html"`
`"C:/stat_240/data/MSP-2018.html"`
`"C:/stat_240/data/ORD-2018.html"`
`"C:/stat_240/data/SFO-2018.html"`
knitr::opts_chunk$set(echo=TRUE,message=FALSE,warning=FALSE,cache=TRUE,autodep=TRUE,cache.comments=FALSE)
library(tidyverse)
library(lubridate)
library(XML)
install.packages("XML")
knitr::opts_chunk$set(echo=TRUE,message=FALSE,warning=FALSE,cache=TRUE,autodep=TRUE,cache.comments=FALSE)
library(tidyverse)
library(lubridate)
library(XML)
## Note: this code assumes viridis.R is two steps up the file directory tree in a `scripts` folder
source("C:/stat_240/scripts/viridis.R")
### Let's look at the actual HTML file first, then try to read in the data
test_airport_file <- "C:/stat_240/data/MSP-2018.html" # specify airport file
# Next we specify the column names
airport_column_names = c("airport",
"terminal",
"date",
"hour",
"us_avg_wait",
"us_max_wait",
"non_us_avg_wait",
"non_us_max_wait",
"all_avg_wait",
"all_max_wait",
"all_n_0_15",
"all_n_16_30",
"all_n_31_45",
"all_n_46_60",
"all_n_61_90",
"all_n_91_120",
"all_n_120_plus",
"all_excluded",
"all_total",
"all_flights",
"all_booths")
airport_column_names
test_airport <- readHTMLTable(test_airport_file)$`NULL` %>%
slice(-(1:3)) # Remove the first three rows
names(test_airport) # default column names
names(test_airport) <- airport_column_names # replace with new names
names(test_airport)
# Look at the data types for the different variables
str(test_airport)
test_airport <- test_airport %>%
as_tibble() %>%
mutate_at(.vars = vars(ends_with("wait"),starts_with("all")),
.funs = as.numeric) %>% # Turn the wait times into numbers
mutate_if(is.factor,as.character) %>% # If any variables are factors, convert to characters
mutate(date = mdy(date)) # Set `date` as a Date format; specify form of data (month, day, year)
str(test_airport)
read_airport <- function(x)
# Input:  x = HTML file
# Output: nicely formatted tibble
{
airport_column_names <- c("airport",
"terminal",
"date",
"hour",
"us_avg_wait",
"us_max_wait",
"non_us_avg_wait",
"non_us_max_wait",
"all_avg_wait",
"all_max_wait",
"all_n_0_15",
"all_n_16_30",
"all_n_31_45",
"all_n_46_60",
"all_n_61_90",
"all_n_91_120",
"all_n_120_plus",
"all_excluded",
"all_total",
"all_flights",
"all_booths")
airport <- readHTMLTable(x)$`NULL` %>%
slice(-(1:3))
names(airport) <- airport_column_names
airport <- airport %>%
as_tibble() %>%
mutate_at(.vars = vars(ends_with("wait"),starts_with("all")),
.funs = as.numeric) %>%
mutate_if(is.factor,as.character) %>%
mutate(date = mdy(date))
return(airport)
}
den <- read_airport("C:/stat_240/data/DEN-2018.html")
jfk <- read_airport("C:/stat_240/data/JFK-2018.html")
lax <- read_airport("C:/stat_240/data/LAX-2018.html")
msp <- read_airport("C:/stat_240/data/MSP-2018.html")
ord <- read_airport("C:/stat_240/data/ORD-2018.html")
sfo <- read_airport("C:/stat_240/data/SFO-2018.html")
awt <- bind_rows(den,jfk,lax,msp, ord,sfo) #airport waiting time
rm(den,jfk,lax,msp,ord,sfo)
str(awt)
View(awt)
count_na <- function(x)
{
return ( sum(is.na(x) ) )
}
awt %>%
summarize_all(count_na)
# There are no missing values for any variables.
## airports and terminals
awt %>%
group_by(airport,terminal) %>%
summarize(passengers = sum(all_total),
flights = sum(all_flights))
### JFK and LAX have five different international terminals
### The other airports have one or two each.
## examine date by airport
awt %>%
select(airport,date) %>%
distinct() %>%
group_by(airport) %>%
summarize(n = n())
## One date is missing for all the airports
## Let's figure out which date is missing
awt <- awt %>%
mutate(month = month(date, label=TRUE)) %>% # add a month variable
select(airport,terminal,date,month,everything())
awt %>%
select(airport,date,month) %>%
distinct() %>%
group_by(airport,month) %>%
summarize(n = n()) %>%
filter(month == "May")
awt
awt
awt %>%
select(airport,date,month) %>%
distinct() %>%
group_by(airport,month) %>%
summarize(n = n()) %>%
awt %>%
select(airport,date,month) %>%
distinct() %>%
group_by(airport,month) %>%
summarize(n = n()) %>%
filter(month == "May")
awt %>%
select(airport,date,month) %>%
distinct() %>%
group_by(airport,month) %>%
summarize(n = n()) %>%
filter(month == "May")
awt %>%
select(airport,date,month) %>%
distinct() %>%
group_by(airport,month) %>%
summarize(n = n()) %>%
awt %>%
select(airport,date,month) %>%
distinct() %>%
group_by(airport,month) %>%
summarize(n = n())
awt <- awt %>%
mutate(month = month(date, label=TRUE)) %>% # add a month variable
select(airport,terminal,date,month,everything())
awt %>%
select(airport,date,month) %>%
distinct() %>%
group_by(airport,month) %>%
summarize(n = n())
awt %>%
select(airport,date,month) %>%
distinct() %>%
group_by(airport,month) %>%
summarize(n = n()) %>%
filter(month == "May")
awt <- awt %>%
mutate(month = month(date, label=TRUE)) %>% # add a month variable
select(airport,terminal,date,month,everything())
awt %>%
select(airport,date,month) %>%
distinct() %>%
group_by(airport,month) %>%
summarize(n = n()) %>%
filter(month == "May")
awt <- awt %>%
mutate(month = month(date, label=TRUE)) %>% # add a month variable
select(airport,terminal,date,month,everything())
awt %>%
select(airport,date,month) %>%
distinct() %>%
group_by(airport,month) %>%
summarize(n = n()) %>%
filter(month == "May")
awt <- awt %>%
mutate(month = month(date, label=TRUE)) %>% # add a month variable
select(airport,terminal,date,month,everything())
awt %>%
select(airport,date,month) %>%
distinct() %>%
group_by(airport,month) %>%
summarize(n = n()) %>%
filter(month == "May")
awt <- awt %>%
mutate(month = month(date, label=TRUE)) %>% # add a month variable
select(airport,terminal,date,month,everything())
awt %>%
select(airport,date,month) %>%
distinct() %>%
group_by(airport,month) %>%
summarize(n = n()) %>%
filter(month == "May")
awt <- awt %>%
mutate(month = month(date, label=TRUE)) %>% # add a month variable
select(airport,terminal,date,month,everything())
awt %>%
select(airport,date,month) %>%
distinct() %>%
group_by(airport,month) %>%
summarize(n = n())
awt <- awt %>%
mutate(month = month(date, label=TRUE)) %>% # add a month variable
select(airport,terminal,date,month,everything())
awt %>%
select(airport,date,month) %>%
distinct() %>%
group_by(airport,month) %>%
summarize(n = n()) %>%
filter(month == "May")
awt %>%
select(airport,date,month) %>%
filter(month == "May") %>%
distinct() %>%
group_by(date) %>%
summarize(n=n())
awt %>%
select(airport,date,month) %>%
filter(month == "May") %>%
distinct() %>%
group_by(date) %>%
summarize(n=n())
## check on May 8
awt %>%
filter(date == "2018-05-08") %>%
summarize(n=n())
awt %>%
select(airport,date,month) %>%
filter(month == "May") %>%
distinct()
awt %>%
select(airport,date,month) %>%
filter(month == "May") %>%
distinct()
awt %>%
select(airport,date,month) %>%
filter(month == "May") %>%
distinct()
awt %>%
select(airport,date,month) %>%
filter(month == "May") %>%
distinct()
awt %>%
select(airport,date,month) %>%
filter(month == "May") %>%
distinct() %>%
group_by(date) %>%
summarize(n=n())
awt %>%
filter(date == "2018-05-08") %>%
summarize(n=n())
awt <- awt %>%
mutate(check_total = all_n_0_15 +
all_n_16_30 +
all_n_31_45 +
all_n_46_60 +
all_n_61_90 +
all_n_91_120 +
all_n_120_plus +
all_excluded)
awt <- awt %>%
mutate(check_total = all_n_0_15 +
all_n_16_30 +
all_n_31_45 +
all_n_46_60 +
all_n_61_90 +
all_n_91_120 +
all_n_120_plus +
all_excluded)
awt %>%
summarize(diff = sum(all_total != check_total))
table_mismatch <- awt %>%
filter(all_total != check_total)
table_mismatch
table_mismatch %>%
group_by(hour) %>%
summarize(n = n())
awt %>%
filter(all_total != check_total) %>%
ggplot(aes(x=all_total - check_total)) +
geom_histogram(boundary=0,binwidth=5)
awt <- awt %>%
## add day of the week
mutate(wday = wday(date, label=TRUE)) %>%
## check total obvious way
mutate(check_total = all_n_0_15 +
all_n_16_30 +
all_n_31_45 +
all_n_46_60 +
all_n_61_90 +
all_n_91_120 +
all_n_120_plus +
all_excluded) %>%
## check total in a new way using purrr::pmap_dbl()
## pmap_dbl here takes a data frame as its first argument
##   and then applies the function row-wise to its elements, we will use the `sum()` function
## select() supplies the data frame
## because we do not pipe into select here directly (we're inside of a pipe into mutate),
##   we need to specify the input to select (we need to note which variables we want to sum over)
##   The '.' represents the object that was piped into mutate
##   To this we select the columns that contain "_n_" and 'all_excluded'
## the row sums of this selected sub-data frame are saved as a new
##   variable named check_total2
mutate(check_total2 =
pmap_dbl(select(.,contains("_n_"),all_excluded),sum)) %>%
select(airport,terminal,date,month,wday,everything())
awt %>%
select(check_total,check_total2) %>% # two variables totaling the passenger counts
mutate(diff = check_total - check_total2) %>% # take the difference
summarize(min = min(diff),
max = max(diff),
ndiff = sum(diff != 0))
check_total_mismatch <- awt %>%
filter(check_total != all_total) %>%
mutate(error = all_total - check_total) %>%
select(airport,date,hour,all_total,check_total,error,everything())
print(paste0(nrow(check_total_mismatch), " observations out of ", nrow(awt), " have an error, or ", round(nrow(check_total_mismatch)/nrow(awt)*100, 2), " %"))
ggplot(awt, aes(x=us_avg_wait,y=us_max_wait,color=airport)) +
geom_point() +
geom_abline(intercept=0,slope=1) +
facet_wrap(~airport)
ggplot(awt, aes(x=non_us_avg_wait,y=non_us_max_wait,color=airport)) +
geom_point(alpha=.05) +
geom_abline(intercept=0,slope=1) +
facet_wrap(~airport)
ggplot(awt, aes(x=us_avg_wait, y=non_us_avg_wait, color=airport)) +
geom_point(alpha = 0.5) +
geom_abline(intercept=0,slope=1) +
facet_wrap(~airport)
awt %>%
filter(non_us_avg_wait == 0)
ggplot(awt, aes(x=airport, y=all_avg_wait, color=airport)) +
geom_boxplot()
ggplot(awt, aes(x=airport, y=all_avg_wait, color=airport)) +
geom_boxplot()
awt %>%
mutate(airport = reorder(airport,-all_avg_wait, FUN=median)) %>%
#`airport` as factor with levels ordered according to -all_avg_wait and FUN value
ggplot(aes(x=airport, y=all_avg_wait, color=airport)) +
geom_boxplot() +
ggtitle("Are some airports more efficient that than others in terms of average wait time?")
awt %>%
group_by(airport, hour) %>%
summarize(total = sum(check_total), booth_total=sum(all_booths)) %>%
mutate(per_booth=round(total/booth_total,2)) %>%
select(-total, -booth_total) %>%
ggplot(aes(hour, per_booth, color=airport)) +
geom_point() +
geom_hline(yintercept=45, linetype="dashed",color="red") +
facet_wrap(~airport) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ylab("Passengers per booth") +
ggtitle("Are some airports more efficient",
subtitle="in the number of people served by hour per available booth?")
