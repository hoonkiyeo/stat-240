r <- cor(x,y)
slope <- r *sy/sx
intercept <- my - slope*mx
slope
intercept
get_estimates <- function(x,y)
{
fit <- lm(y ~ x)
return ( coef(fit))
}
get_estimates(Win_pct, errors_per_set)
SEC <- vb_team %>%
filter(Conference == "SEC") %>%
mutate(errors_per_set = Errors/Sets) %>%
select(Team, Conference, Win_pct, errors_per_set, everything())
ggplot(SEC, aes(x = Win_pct, y = errors_per_set)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_smooth(se = FALSE, color = "red") +
xlab("Winning percentage") +
ylab("Erros per set for the teams") +
ggtitle("2019 SEC Women's Volleyball")
x <- SEC$errors_per_set
y <- SEC$Win_pct
mx <- mean(x)
my <- mean(y)
sx <- sd(x)
sy <- sd(y)
r <- cor(x,y)
slope <- r *sy/sx
intercept <- my - slope*mx
slope
intercept
get_estimates <- function(x,y)
{
fit <- lm(y ~ x)
return ( coef(fit))
}
get_estimates(Win_pct, errors_per_set)
x <- SEC$errors_per_set
y <- SEC$Win_pct
mx <- mean(x)
my <- mean(y)
sx <- sd(x)
sy <- sd(y)
r <- cor(x,y)
slope <- r *sy/sx
intercept <- my - slope*mx
slope
intercept
get_estimates <- function(x,y)
{
fit <- lm(y ~ x)
return ( coef(fit))
}
get_estimates(SEC$Win_pct, SEC$errors_per_set)
x <- SEC$errors_per_set
y <- SEC$Win_pct
mx <- mean(x)
my <- mean(y)
sx <- sd(x)
sy <- sd(y)
r <- cor(x,y)
slope <- r *sy/sx
intercept <- my - slope*mx
slope
intercept
get_estimates <- function(x,y,data)
{
fit <- lm(y ~ x,data)
return ( coef(fit))
}
get_estimates(Win_pct, erros_per_set, SEC)
x <- SEC$errors_per_set
y <- SEC$Win_pct
mx <- mean(x)
my <- mean(y)
sx <- sd(x)
sy <- sd(y)
r <- cor(x,y)
slope <- r *sy/sx
intercept <- my - slope*mx
slope
intercept
get_estimates <- function(x,y,data)
{
fit <- lm(y ~ x,data)
return ( coef(fit))
}
get_estimates(Win_pct, errors_per_set, SEC)
SEC <- vb_team %>%
filter(Conference == "SEC") %>%
mutate(errors_per_set = Errors/Sets) %>%
select(Team, Conference, Win_pct, errors_per_set, everything())
SEC
SEC <- vb_team %>%
filter(Conference == "SEC") %>%
mutate(errors_per_set = Errors/Sets) %>%
select(Team, Conference, Win_pct, errors_per_set, everything())
ggplot(SEC, aes(x = Win_pct, y = errors_per_set)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_smooth(se = FALSE, color = "red") +
xlab("Winning percentage") +
ylab("Erros per set for the teams") +
ggtitle("2019 SEC Women's Volleyball")
<- SEC$errors_per_set
x <- SEC$errors_per_set
y <- SEC$Win_pct
mx <- mean(x)
my <- mean(y)
sx <- sd(x)
sy <- sd(y)
r <- cor(x,y)
slope <- r *sy/sx
intercept <- my - slope*mx
slope
intercept
get_estimates <- function(x,y,data)
{
fit <- lm(y ~ x,data)
return ( coef(fit))
}
get_estimates(Win_pct, errors_per_set, SEC)
get_estimates <- function(x,y)
{
fit <- lm(y ~ x)
return ( coef(fit))
}
get_estimates <- function(x,y)
{
fit <- lm(y ~ x)
return (fit)
}
SEC %>%
get_estimates(y, x)
get_estimates(x,y)
x <- SEC$errors_per_set
y <- SEC$Win_pct
mx <- mean(x)
my <- mean(y)
sx <- sd(x)
sy <- sd(y)
r <- cor(x,y)
slope <- r *sy/sx
intercept <- my - slope*mx
slope
intercept
get_estimates <- function(x,y)
{
fit <- lm(y ~ x)
return (fit)
}
get_estimates(x,y)
ggplot(kills_summary, aes(x=r)) +
geom_density()
get_slope <- function(x,y)
{
fit <- lm(y ~ x)
return ( coef(fit)[2] )
}
kills_summary <- vb %>%
group_by(Conference) %>%
summarize(r = cor(kills_per_set,Win_pct),
b = get_slope(kills_per_set,Win_pct))
kills_summary
ggplot(kills_summary, aes(x=r)) +
geom_density()
ggplot(kills_summary, aes(x=b)) +
geom_density()
SEC <- vb_team %>%
filter(Conference == "SEC") %>%
mutate(errors_per_set = Errors/Sets) %>%
select(Team, Conference, Win_pct, errors_per_set, everything())
ggplot(SEC, aes(x = Win_pct, y = errors_per_set)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_smooth(se = FALSE, color = "red") +
xlab("Winning percentage") +
ylab("Erros per set") +
ggtitle("2019 SEC Women's Volleyball")
## This function uses some rlang dark magic
##   so that the variable names can be passed in without quotes
##   like in tidyverse functions
## The arguments that are variables in df without quotes need to be
##   wrapped by enquo() so that R does not try to evaluate them
## Then, when we use them we need to "un enquo()" them
##   which is what !! does.
library(rlang)
vb_regression_summary <- function(df,x,y)
{
x <- enquo(x)
y <- enquo(y)
vb_sum <- df %>%
group_by(Conference) %>%
summarize(r = cor(!!x,!!y),
b = get_slope(!!x,!!y))
g1 <- ggplot(vb_sum, aes(x = r)) +
geom_density() +
ggtitle(paste0("cor(",as_name(x),",",as_name(y),")"))
g2 <- ggplot(vb_sum, aes(x = b)) +
geom_density() +
ggtitle(paste0("slope from lm(",as_name(y),"~",as_name(x),")"))
plot(g1)
plot(g2)
return ( invisible(vb_sum) )
}
vb_regression_summary(vb,kills_per_set,Win_pct)
vb_regression_summary(vb,Hit_pct,Win_pct) ## Hit_pct = (Kills - Errors)/`Total Attacks`
fit_4<- lm(Win_pct~errors_per_set, data = SEC)
coef(fit_4)
ggplot(SEC, aes(errors_per_set, Win_pct)) +
geom_point() +
geom_abline(slope = -0.2126626 , intercept = 1.6679851, color ="red") +
labs(x= "Errors Per Set", y = "Winning Percentage") +
geom_point(x=4.5, y=(4*-0.2126626+1.667985), color="red")
ggplot(SEC, aes(Win_pct, erros_per_set)) +
geom_point() +
geom_abline(slope = -0.2126626 , intercept = 1.6679851, color ="red") +
labs(x= "Errors Per Set", y = "Winning Percentage") +
geom_point(x=4.5, y=(4*-0.2126626+1.667985), color="red")
fit_4<- lm(Win_pct~errors_per_set, data = SEC)
coef(fit_4)
ggplot(SEC, aes(Win_pct, errors_per_set)) +
geom_point() +
geom_abline(slope = -0.2126626 , intercept = 1.6679851, color ="red") +
labs(x= "Errors Per Set", y = "Winning Percentage") +
geom_point(x=4.5, y=(4*-0.2126626+1.667985), color="red")
fit_4<- lm(Win_pct~errors_per_set, data = SEC)
coef(fit_4)
ggplot(SEC, aes(errors_per_set, Win_pct)) +
geom_point() +
geom_abline(slope = -0.2126626 , intercept = 1.6679851, color ="red") +
labs(x= "Errors Per Set", y = "Winning Percentage") +
geom_point(x=4.5, y=(4*-0.2126626+1.667985), color="red")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warnings=FALSE)
library(tidyverse)
library(lubridate)
source("C:/stat_240/scripts/viridis.R")
source("C:/stat_240/scripts/ggprob.R")
vb_team <- read_csv("C:/stat_240/data/volleyball-team-2019.csv")
vb_match <- read_csv("C:/stat_240/data/vb-division1-2019-all-matches-corrected.csv") %>%
mutate(index = row_number()) %>%
select(index,everything())
q1 <- vb_team %>%
filter(Conference == "SEC") %>%
mutate(errors_per_set = Errors / Sets) #%>%
#summarize(Team,Win_pct, errors_per_set, Conference)
q1
q1graph <- ggplot(q1, aes(Win_pct, errors_per_set)) +
geom_point() +
geom_smooth(method = "lm", se= F)+
geom_smooth(method = "loess", se= F)+
xlab("Winning Percentage") +
ylab("Errors per Set") +
ggtitle("Winning % vs. Errors per team in the SEC")
q1graph
fit_1 <- lm(Win_pct ~errors_per_set , data=q1)
fit_1
a_1 = cor(q1$errors_per_set,q1$Win_pct)*(sd(q1$Win_pct)/sd(q1$errors_per_set))
y_bar = mean(q1$Win_pct)
a_0 = y_bar - a_1*mean(q1$errors_per_set)
a_0
a_1
fit_4<- lm(Win_pct~errors_per_set, data = q1)
coef(fit_4)
ggplot(q1, aes(errors_per_set, Win_pct)) +
geom_point() +
geom_abline(slope = -0.2126626 , intercept = 1.6679851, color ="red") +
labs(x= "Errors Per Set", y = "Winning Percentage") +
geom_point(x=4.5, y=(4*-0.2126626+1.667985), color="red")
knitr::opts_chunk$set(echo=TRUE,message=FALSE,warning=FALSE,cache=TRUE,autodep=TRUE,cache.comments=FALSE)
library(tidyverse)
library(lubridate)
library(kableExtra)
source("C:/stat_240/scripts/viridis.R")
source("C:/stat_240/scripts/ggprob.R")
vb_team <- read_csv("C:/staT_240/data/volleyball-team-2019.csv")
vb_match <- read_csv("C:/stat_240/data/vb-division1-2019-all-matches.csv") %>%
mutate(index = row_number()) %>%
select(index,everything())
vb_team %>%
summarize(wins = sum(W),
losses = sum(L))
nrow(vb_match)
team_name <- "Samford"
vb_match %>%
filter(team1==team_name | team2==team_name)
vb_team %>%
filter(Team == team_name)
total1 <- 23+25+18+25+9
total2 <- 25+20+25+22+15
max_p <- (total1/(total1+total2))
q <- seq(0,1, length = 150)
l <- function(q){
q^total1*(1-q)^107
}
l_df <- tibble(
q=q,
l=l(q)
)
ggplot(l_df, aes(q,l)) +
geom_line() +
geom_vline(xintercept = max_p, color = "red", linetype = "dashed") +
labs(x = "Likelihood", y = "Probability")
round(log(100/107),5)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warnings=FALSE)
library(tidyverse)
library(lubridate)
source("C:/stat_240/scripts/viridis.R")
source("C:/stat_240/scripts/ggprob.R")
vb_team <- read_csv("C:/stat_240/data/volleyball-team-2019.csv")
vb_match <- read_csv("C:/stat_240/data/vb-division1-2019-all-matches-corrected.csv") %>%
mutate(index = row_number()) %>%
select(index,everything())
SEC <- vb_team %>%
filter(Conference == "SEC") %>%
mutate(errors_per_set = Errors/Sets) %>%
select(Team, Conference, Win_pct, errors_per_set, everything())
ggplot(SEC, aes(x = Win_pct, y = errors_per_set)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_smooth(se = FALSE, color = "red") +
xlab("Winning percentage") +
ylab("Erros per set") +
ggtitle("2019 SEC Women's Volleyball")
x <- SEC$errors_per_set
y <- SEC$Win_pct
mx <- mean(x)
my <- mean(y)
sx <- sd(x)
sy <- sd(y)
r <- cor(x,y)
slope <- r *sy/sx
intercept <- my - slope*mx
slope
intercept
get_estimates <- function(x,y)
{
fit <- lm(y ~ x)
return (fit)
}
get_estimates(x,y)
fit_4<- lm(Win_pct~errors_per_set, data = SEC)
coef(fit_4)
ggplot(SEC, aes(errors_per_set, Win_pct)) +
geom_point() +
geom_abline(slope = -0.2126626 , intercept = 1.6679851, color ="red") +
labs(x= "Errors Per Set", y = "Winning Percentage") +
geom_point(x=4.5, y=(4*-0.2126626+1.667985), color="red")
fit_4<- lm(Win_pct~errors_per_set, data = SEC)
coef(fit_4)
fit_4<- lm(Win_pct~errors_per_set, data = SEC)
coef(fit_4)
ggplot(SEC, aes(errors_per_set, Win_pct)) +
geom_point() +
geom_abline(slope = -0.2126626 , intercept = 1.6679851, color ="red") +
labs(x= "Errors Per Set", y = "Winning Percentage") +
geom_point(x=4.5, y=(4*-0.2126626+1.667985), color="red")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warnings=FALSE)
library(tidyverse)
library(lubridate)
source("C:/stat_240/scripts/viridis.R")
source("C:/stat_240/scripts/ggprob.R")
vb_team <- read_csv("C:/stat_240/data/volleyball-team-2019.csv")
vb_match <- read_csv("C:/stat_240/data/vb-division1-2019-all-matches-corrected.csv") %>%
mutate(index = row_number()) %>%
select(index,everything())
SEC <- vb_team %>%
filter(Conference == "SEC") %>%
mutate(errors_per_set = Errors/Sets) %>%
select(Team, Conference, Win_pct, errors_per_set, everything())
ggplot(SEC, aes(x = Win_pct, y = errors_per_set)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_smooth(se = FALSE, color = "red") +
xlab("Winning percentage") +
ylab("Erros per set") +
ggtitle("2019 SEC Women's Volleyball")
x <- SEC$errors_per_set
y <- SEC$Win_pct
mx <- mean(x)
my <- mean(y)
sx <- sd(x)
sy <- sd(y)
r <- cor(x,y)
slope <- r *sy/sx
intercept <- my - slope*mx
slope
intercept
get_estimates <- function(x,y)
{
fit <- lm(y ~ x)
return (fit)
}
get_estimates(x,y)
fit_4<- lm(Win_pct~errors_per_set, data = SEC)
coef(fit_4)
ggplot(SEC, aes(errors_per_set, Win_pct)) +
geom_point() +
geom_abline(slope = -0.2126626 , intercept = 1.6679851, color ="red") +
labs(x= "Errors Per Set", y = "Winning Percentage") +
geom_point(x=4.5, y=(4*-0.2126626+1.667985), color="red")
delta = seq(0,1 , by=0.01)
Bp= (delta**100)*((1-delta)**107)
ggplot(mapping = aes(x = delta, y = Bp))+
geom_line()+
geom_vline(xintercept = 100/207, color="red", linetype = "dashed")+
ylab("Likelihood")+
xlab("Probability")
p = 100/207
log(p / (1-p))
Delta = seq(0,1 , by=0.01)
Bp= (delta**100)*((1-delta)**107)
ggplot(mapping = aes(x = Delta, y = Bp))+
geom_line()+
geom_vline(xintercept = 100/207, color="red", linetype = "dashed")+
xlab("Probability") +
ylab("Likelihood")
p = 100/207
log(p / (1-p))
Delta = seq(0,1 , by=0.01)
Bp= (Delta**100)*((1-Delta)**107)
ggplot(mapping = aes(x = Delta, y = Bp))+
geom_line()+
geom_vline(xintercept = 100/207, color="red", linetype = "dashed")+
xlab("Probability") +
ylab("Likelihood")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warnings=FALSE)
library(tidyverse)
library(lubridate)
source("C:/stat_240/scripts/viridis.R")
source("C:/stat_240/scripts/ggprob.R")
vb_team <- read_csv("C:/stat_240/data/volleyball-team-2019.csv")
vb_match <- read_csv("C:/stat_240/data/vb-division1-2019-all-matches-corrected.csv") %>%
mutate(index = row_number()) %>%
select(index,everything())
SEC <- vb_team %>%
filter(Conference == "SEC") %>%
mutate(errors_per_set = Errors/Sets) %>%
select(Team, Conference, Win_pct, errors_per_set, everything())
ggplot(SEC, aes(x = Win_pct, y = errors_per_set)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_smooth(se = FALSE, color = "red") +
xlab("Winning percentage") +
ylab("Erros per set") +
ggtitle("2019 SEC Women's Volleyball")
x <- SEC$errors_per_set
y <- SEC$Win_pct
mx <- mean(x)
my <- mean(y)
sx <- sd(x)
sy <- sd(y)
r <- cor(x,y)
slope <- r *sy/sx
intercept <- my - slope*mx
slope
intercept
get_estimates <- function(x,y)
{
fit <- lm(y ~ x)
return (fit)
}
get_estimates(x,y)
get_estimates(x,y)
x <- SEC$errors_per_set
y <- SEC$Win_pct
mx <- mean(x)
my <- mean(y)
sx <- sd(x)
sy <- sd(y)
r <- cor(x,y)
slope <- r *sy/sx
intercept <- my - slope*mx
slope
intercept
get_estimates <- function(x,y)
{
fit <- lm(y ~ x)
return (fit)
}
get_estimates(x,y)
fit_4<- lm(Win_pct~errors_per_set, data = SEC)
coef(fit_4)
fit_4<- lm(Win_pct~errors_per_set, data = SEC)
coef(fit_4)
ggplot(SEC, aes(errors_per_set, Win_pct)) +
geom_point() +
geom_abline(slope = -0.2126626 , intercept = 1.6679851, color ="red") +
labs(x= "Errors Per Set", y = "Winning Percentage") +
geom_point(x=4.5, y=(4*-0.2126626+1.667985), color="red")
fit_4<- lm(Win_pct~errors_per_set, data = SEC)
coef(fit_4)
ggplot(SEC, aes(errors_per_set, Win_pct)) +
geom_point() +
geom_abline(slope = -0.2126626 , intercept = 1.6679851, color ="red") +
labs(x= "Errors Per Set", y = "Winning Percentage") +
geom_point(x=4.5, y=(4.5*-0.2126626+1.667985), color="red")
vb_match %>%
filter(team1=="Ole Miss" & team2 == "Alabama")
vb_match %>%
filter(team1=="Ole Miss" & team2 == "Alabama")
total_1 <- 23+25+18+25+9
total_2 <- 25+20+25+22+15
total_1
total_2
p = 100/207
log(p)
p
p = 100/207
log(100/107)
