knitr::opts_chunk$set(echo=TRUE,message=FALSE,warning=FALSE,cache=TRUE,autodep=TRUE,cache.comments=FALSE)
library(tidyverse)
library(lubridate)
library(kableExtra)
source("C:/stat_240/scripts/viridis.R")
source("C:/stat_240/scripts/ggprob.R")
inv_logistic <- function(x) { return ( 1/(1 + exp(-x)) )} #estimate for the probabilty
sim_set <- function(delta,target) #simulating one set
{
p <- inv_logistic(delta)
points <- c(0,0)
repeat
{
pt <- rbinom(1,1,p)
if ( pt == 1 )
points[1] <- points[1] + 1
else
points[2] <- points[2] + 1
if ( max(points) >= target && abs(diff(points)) >= 2 )
break
}
return ( points )
}
sim_set(.1, 25)
sim_set(.1, 25)
sim_set(.1, 25)
sim_set(.1, 25)
sim_match <- function(delta)
{
tab <- matrix(NA,2,5)
sets <- c(0,0)
index <- 1
repeat
{
if ( sum(sets) < 4 )
result <- sim_set(delta,25)
else
result <- sim_set(delta,15)
if ( result[1] > result[2] )
sets[1] <- sets[1] + 1
else
sets[2] <- sets[2] + 1
tab[,index] <- result
index <- index + 1
if ( max(sets == 3) )
break
}
return ( tab )
}
sim_set(.1, 25)
sim_set(.1, 25)
sim_set(.1, 25)
sim_set(.1, 25)
sim_set(.1, 25)
sim_set(.1, 25)
sim_set(.1, 25)
sim_set(.1, 25)
sim_set(.1, 25)
sim_set(.1, 25)
sim_set(.1, 25)
sim_set(.1, 25)
sim_set(.1, 25)
set.seed(356346)
for ( i in 1:10 )
{
print(i)
print( sim_match(0.1) )
}
knitr::opts_chunk$set(echo=TRUE,message=FALSE,warning=FALSE,cache=TRUE,autodep=TRUE,cache.comments=FALSE)
library(tidyverse)
library(lubridate)
library(kableExtra)
library(dplyr)
source("C:/stat_240/scripts/viridis.R")
source("C:/stat_240/scripts/ggprob.R")
aces <- read_csv("C:/stat_240/data/aces.csv")
assists <- read_csv("C:/stat_240/data/assists.csv")
blocks <- read_csv("C:/stat_240/data/blocks.csv")
digs <- read_csv("C:/stat_240/data/digs.csv")
hitting <- read_csv("C:/stat_240/data/hitting.csv")
kills <- read_csv("C:/stat_240/data/kills.csv")
opponents <- read_csv("C:/stat_240/data/opponent-hitting.csv")
wl <- read_csv("C:/stat_240/data/win-loss.csv")
## Remove redundant columns
remove_redundant <- function(x){
x <- x %>%
select(-Rank,-`W-L`,-`Per Set`) %>%
arrange(Team)
return ( x )
}
aces <- remove_redundant(aces)
assists <- remove_redundant(assists)
blocks <- remove_redundant(blocks)
digs <- remove_redundant(digs)
## Hit Pct. is (Kills - Errors) / Attacks
hitting <- hitting %>%
select(-Rank,-S,-`W-L`,-`Pct.`) %>%
mutate(Hit_pct = (Kills - Errors)/`Total Attacks`) %>%
arrange(Team)
kills <- remove_redundant(kills)
opponents <- opponents %>%
select(-Rank,-S,-`Opp Pct`) %>%
mutate(Opp_pct = (`Opp Kills` - `Opp Errors`)/`Opp Attacks`) %>%
arrange(Team)
wl <- wl %>%
select(-Rank,-`Pct.`) %>%
mutate(Win_pct = W/(W+L)) %>%
arrange(Team)
## join the data
vb <- wl %>%
left_join(aces) %>%
left_join(assists) %>%
left_join(blocks) %>%
left_join(digs) %>%
left_join(hitting) %>%
##  left_join(kills) %>% ## kills are also in hitting
left_join(opponents) %>%
rename(Sets = S)
## separate team from conference
## Tricky because conference follows team name in parentheses
##   but some team names include location in parentheses
## Catch the last set of () in each string
##   with spaces, dashes, letters, and numbers between
conference_pattern <- "\\([- a-zA-Z0-9]+\\)$"
#str_extract(vb$Team,conference_pattern)
vb <- vb %>%
mutate(Conference =
str_sub(str_extract(Team,conference_pattern),2,-2)) %>%
mutate(Team =
str_remove(Team,conference_pattern)) %>%
select(Team,Conference,everything())
rm(conference_pattern)
write_csv(vb,"../../data/volleyball-team-2019.csv")
aces <- read_csv("C:/stat_240/data/aces.csv")
assists <- read_csv("C:/stat_240/data/assists.csv")
blocks <- read_csv("C:/stat_240/data/blocks.csv")
digs <- read_csv("C:/stat_240/data/digs.csv")
hitting <- read_csv("C:/stat_240/data/hitting.csv")
kills <- read_csv("C:/stat_240/data/kills.csv")
opponents <- read_csv("C:/stat_240/data/opponent-hitting.csv")
wl <- read_csv("C:/stat_240/data/win-loss.csv")
## Remove redundant columns
remove_redundant <- function(x){
x <- x %>%
select(-Rank,-`W-L`,-`Per Set`) %>%
arrange(Team)
return ( x )
}
aces <- remove_redundant(aces)
assists <- remove_redundant(assists)
blocks <- remove_redundant(blocks)
digs <- remove_redundant(digs)
## Hit Pct. is (Kills - Errors) / Attacks
hitting <- hitting %>%
select(-Rank,-S,-`W-L`,-`Pct.`) %>%
mutate(Hit_pct = (Kills - Errors)/`Total Attacks`) %>%
arrange(Team)
kills <- remove_redundant(kills)
opponents <- opponents %>%
select(-Rank,-S,-`Opp Pct`) %>%
mutate(Opp_pct = (`Opp Kills` - `Opp Errors`)/`Opp Attacks`) %>%
arrange(Team)
wl <- wl %>%
select(-Rank,-`Pct.`) %>%
mutate(Win_pct = W/(W+L)) %>%
arrange(Team)
## join the data
vb <- wl %>%
left_join(aces) %>%
left_join(assists) %>%
left_join(blocks) %>%
left_join(digs) %>%
left_join(hitting) %>%
##  left_join(kills) %>% ## kills are also in hitting
left_join(opponents) %>%
rename(Sets = S)
## separate team from conference
## Tricky because conference follows team name in parentheses
##   but some team names include location in parentheses
## Catch the last set of () in each string
##   with spaces, dashes, letters, and numbers between
conference_pattern <- "\\([- a-zA-Z0-9]+\\)$"
#str_extract(vb$Team,conference_pattern)
vb <- vb %>%
mutate(Conference =
str_sub(str_extract(Team,conference_pattern),2,-2)) %>%
mutate(Team =
str_remove(Team,conference_pattern)) %>%
select(Team,Conference,everything())
rm(conference_pattern)
write_csv(vb,"C:/stat_240/data/volleyball-team-2019.csv")
vb
vb <- read_csv("C:/stat_240/data/volleyball-team-2019.csv")
big10 <- vb %>%
filter(Conference == "Big Ten")
vb <- read_csv("C:/stat_240/data/volleyball-team-2019.csv")
get_slope <- function(x,y)
{
fit <- lm(y ~ x)
return ( coef(fit)[2] )
}
kills_summary <- vb %>%
group_by(Conference) %>%
summarize(r = cor(kills_per_set,Win_pct),
b = get_slope(kills_per_set,Win_pct))
ggplot(vb, aes(x=kills_per_set,y=Win_pct,color=Conference)) +
##  geom_point() +
##  geom_smooth(se=FALSE,method="lm")
geom_point(show.legend=FALSE) +
geom_smooth(se=FALSE,method="lm",show.legend=FALSE)
vb %>%
select(Team, Conference, W, L, Win_pct) %>%
mutate(w2 = W/(W+L))
vb %>%
group_by(Conference) %>%
summarize(n=n(),
mean_win_pct = mean(Win_pct),
mean_win_pct_2 = sum(W)/(sum(W)+sum(L))) %>%
arrange(desc(mean_win_pct)) %>%
print(n=50)
vb <- vb %>%
mutate(kills_per_set = Kills/Sets)
ggplot(vb, aes(x=kills_per_set,y=Win_pct)) +
geom_point() +
geom_smooth(se=FALSE,method="lm") +
facet_wrap(~Conference)
ggplot(vb, aes(x=kills_per_set,y=Win_pct,color=Conference)) +
##  geom_point() +
##  geom_smooth(se=FALSE,method="lm")
geom_point(show.legend=FALSE) +
geom_smooth(se=FALSE,method="lm",show.legend=FALSE)
get_slope <- function(x,y)
{
fit <- lm(y ~ x)
return ( coef(fit)[2] )
}
kills_summary <- vb %>%
group_by(Conference) %>%
summarize(r = cor(kills_per_set,Win_pct),
b = get_slope(kills_per_set,Win_pct))
kills_summary
ggplot(kills_summary, aes(x=r)) +
geom_density()
ggplot(kills_summary, aes(x=b)) +
geom_density()
