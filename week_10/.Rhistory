knitr::opts_chunk$set(echo=TRUE,message=FALSE,warning=FALSE,cache=TRUE,autodep=TRUE,cache.comments=FALSE)
library(tidyverse)
library(lubridate)
library(kableExtra)
source("C:/stat_240/scripts/viridis.R")
source("C:/stat_240/scripts/ggprob.R")
geissler <-  read_csv("../../data/geissler.csv")
knitr::opts_chunk$set(echo=TRUE,message=FALSE,warning=FALSE,cache=TRUE,autodep=TRUE,cache.comments=FALSE)
library(tidyverse)
library(lubridate)
library(kableExtra)
source("C:/stat_240/scripts/viridis.R")
source("C:/stat_240/scripts/ggprob.R")
geissler <-  read_csv("C:/stat_240/data/geissler.csv")
### pick your own seed
### choose an integer between 1000 and 100,000 (instead of the 49639)
set.seed(49639)
### Step 1: Randomly pick the size of family you will work with
size <- sample(1:12,1)
size
### Step 2: Create a subset of the data including only families of a given size
size8 <- geissler %>%
filter(size==8)
size8
### Step 3: Calculate the observed proportions of the number of families with each possible number of boys and girls.
## Add these proportions as a column to your data.
size8 <- size8 %>%
mutate(prop = freq/sum(freq))
size8
### Step 4:  Determine the total number of boys, the total number of girls, and the total number of children in your families. Estimate `p` by the ratio of the total number of boys out of the total number of children.
size8_sum <- size8 %>%
summarize(
boys = sum(boys*freq),
girls = sum(girls*freq),
total = sum(size*freq),
p_boy = boys/total,
p_girl = girls/total
)
size8_sum
### Step 5:  For your family size, assume the binomial distribution for the number of boys in a family of that size. Calculate the binomial probabilities of each possible outcome and add these values as a new column in your data frame.
p_8 <- size8_sum$p_boy
p_8
size8 <- size8 %>%
mutate(p_binom = dbinom(boys,8,p_8))
size8
### Step 6:  Graph the binomial distribution (use `gbinom()`)
gbinom(8,p_8) +
geom_point(aes(x=boys,y=p_binom), data=size8, color="black",shape=1)
### Step 7: Add to this plot a graph of the observed frequencies with a line plot (geom_lines()). How do the observed frequencies compare to the binomial probabilities?
gbinom(8,p_8) +
geom_line(aes(x=boys,y=prop), data=size8, color="red") +
geom_point(aes(x=boys,y=prop), data=size8, color="red",shape=1) +
geom_point(aes(x=boys,y=p_binom), data=size8, color="black",shape=1)
## Observed variance is greater than the binomial variance
## We say the data are *overdispersed* compared to a binomial model where all children in all families have the same chance of being a boy
size8 %>%
summarize(
mean_prop = sum(boys*prop),
mean_binom = sum(boys*p_binom),
var_prop = sum((boys-mean_prop)^2*prop),
var_binom = sum((boys-mean_binom)^2*p_binom),
var_ratio = var_prop/var_binom
) %>%
select(var_ratio)
## x is the geissler data (columns boys, girls, size, freq)
## s is the size we filter on
binom_fit_plot <- function(x,s)
{
x <- x %>%
filter(size==s) %>%
mutate(prop = freq/sum(freq))
x_sum <- x %>%
summarize(
boys = sum(boys*freq),
girls = sum(girls*freq),
total = sum(size*freq),
p_boy = boys/total,
p_girl = girls/total
)
x <- x %>%
mutate(p_binom = dbinom(0:s,s,x_sum$p_boy))
g <- gbinom(s,x_sum$p_boy) +
geom_line(aes(x=boys,y=prop), data=x,
color="red") +
geom_point(aes(x=boys,y=prop),
data=x,color="red",shape=1) +
geom_point(aes(x=boys,y=p_binom), data=x,
color="black",shape=1) +
xlab("# of boys") +
scale_x_continuous(breaks=0:s) +
theme_bw()
return ( g )
}
for ( s in 1:12 )
plot( binom_fit_plot(geissler,s) )
overdispersion_check <- function(x,s){
x <- x %>%
filter(size==s) %>%
mutate(prop = freq/sum(freq))
x_sum <- x %>%
summarize(
boys = sum(boys*freq),
girls = sum(girls*freq),
total = sum(size*freq),
p_boy = boys/total,
p_girl = girls/total
)
x <- x %>%
mutate(p_binom = dbinom(0:s,s,x_sum$p_boy))
out <- x %>%
summarize(
size = min(size),
mean_prop = sum(boys*prop),
mean_binom = sum(boys*p_binom),
var_prop = sum((boys-mean_prop)^2*prop),
var_binom = sum((boys-mean_binom)^2*p_binom),
var_ratio = var_prop/var_binom
) %>%
select(size, var_ratio)
return(out)
}
overdispersion_estimates <- tibble()
for ( s in 1:12 )
overdispersion_estimates <- overdispersion_estimates %>%
bind_rows(overdispersion_check(geissler,s))
g2 <- geissler %>%
group_by(size) %>%
summarize(families = sum(freq),
children = sum(size*freq),
p_boys = sum(boys*freq)/children,
p_girls = sum(girls*freq)/children)
ggplot(g2, aes(x=size,y=p_boys)) +
geom_line() +
geom_point() +
xlab("Family Size") +
ylab("Proportion of Boys") +
scale_x_continuous(breaks=0:12) +
theme_bw()
round((g2$p_boys/g2$p_girls)*100,1)
## x is a vector of counts from 0 to size
##   with the number of families with that many boys
get_rstat <- function(x)
{
n <- length(x) - 1
boys <- 0:n
observed_p <- x/sum(x)
est_p <- sum(boys*x) / sum(n*x) #estimated proportion of boys
binom_p <- dbinom(boys,n,est_p) #binomial probability
return ( sum(abs(observed_p - binom_p)) )
}
x_8 <- geissler %>%
filter(size==8) %>%
pull(freq)
get_rstat(x_8)
x_8 <- geissler %>%
filter(size==8)
x_8
x_8 <- geissler %>%
filter(size==8) %>%
pull(freq)
x_8
x_8 <- geissler %>%
filter(size==8) %>%
pull(freq)
get_rstat(x_8)
p_8 <- sum(0:8*x_8) / sum(8*x_8) #total num of boys/total num of children
families_8 <- sum(x_8)
p_8 <- sum(0:8*x_8) / sum(8*x_8) #total num of boys/total num of children
families_8 <- sum(x_8)
N <- 10000 #repetitions
test_8 <- numeric(N)
for ( i in 1:N ){
boys <- rbinom(families_8,8,p_8)
x <- tabulate(boys+1,nbin=9) #count how many boys there are for each of the integer.
test_8[i] <- get_rstat(x)
}
df8 <- tibble(x=test_8)
ggplot(df8, aes(x=x)) +
geom_density() +
geom_vline(xintercept = get_rstat(x_8),
color="red", linetype="dashed")
mean(test_8>=get_rstat(x_8))
size6 <- geissler %>%
filter(size==6) %>%
mutate(prop = freq/sum(freq))
size6_sum <- size6 %>%
summarize(
families = sum(freq),
boys = sum(boys*freq),
girls = sum(girls*freq),
total = sum(size*freq),
p_boy = boys/total,
p_girl = girls/total
)
size6_sum
p_6 <- size6_sum$p_boy
p_6
size6_sum$families
size6 <- size6 %>%
mutate(p_binom = dbinom(0:6,6,p_6))
size6
binom_fit_plot(geissler,6)
dbb <- function(x,n,a,b,log=FALSE)
{
log_d <- lchoose(n,x) +
lbeta(x+a,n-x+b) -
lbeta(a,b)
if ( log )
return ( log_d )
return ( exp( log_d ) )
}
## beta-binomial density
dbb <- function(x,n,a,b,log=FALSE)
{
log_d <- lchoose(n,x) +
lbeta(x+a,n-x+b) -
lbeta(a,b)
if ( log )
return ( log_d )
return ( exp( log_d ) )
}
## This function assumes that the sample x_1,\ldots,x_m
## (all assumed from the same beta-binomial distribution)
## has been summarized into a vector of length n+1
## with the tabulated counts for each outcome from 0 to n
## The function returns estimates of the mean and variance
mbb <- function(x)
{
n <- length(x) - 1
m <- sum(x)
mx <- sum((0:n)*x)/m
vx <- sum(x*(0:n - mx)^2)/m
return(tibble(mx,vx))
}
## Log-likelihood function for (mu,phi)
## mu = alpha/(alpha + beta)
## phi = alpha + beta
## x are the counts from 0 to n
## theta = c(mu,phi)
lmpbb <- function(theta,x)
{
mu <- theta[1]
phi <- theta[2]
alpha <- mu*phi
beta <- (1-mu)*phi
n <- length(x) - 1
return( sum(x*dbb(0:n,n,alpha,beta,log=TRUE)) )
}
## Use optim to find mle estimates of alpha and beta from counts
## Use method of moments to initialize the algorithm.
## Find mu and phi. Then translate to alpha and beta.
## If the returned convergence is not 0,
##   then there was an error in the optimization
mlebb <- function(x)
{
n <- length(x)-1
moments <- mbb(x)
mx <- moments$mx
vx <- moments$vx
mu_0 <- mx/n
phi_0 <- (n*n*mu_0*(1-mu_0) - vx)/(vx - n*mu_0*(1-mu_0))
opt <- optim(c(mu_0,phi_0),lmpbb,x=x,
control = list(fnscale=-1),
method = "L-BFGS-B",
lower = c(1e-7,1e-7),
upper = c(1-1e-7,Inf))
df <- tibble(
mu = opt$par[1],
phi = opt$par[2],
alpha = mu*phi,
beta = (1-mu)*phi,
logl = opt$value,
convergence = opt$convergence)
return( df )
}
x6 <- size6 %>%
pull(freq)
##
p_hat <- sum(x6*(0:6))/(6*sum(x6))
p_hat
logl_1 <- sum(x6*dbinom(0:6,6,p_hat,log=TRUE))
logl_1
bb_6 <- mlebb(x6)
bb_6
G <- -2 * (logl_1 - bb_6$logl)
G #test statistics
p_value_1 <- 1 - pchisq(G,1) # P(X^2 >= G)
p_value_1
p_hat_2 <- x6/sum(x6)
p_hat_2
logl_2 <- sum(x6*log(p_hat_2))
logl_2
p_hat_2 <- x6/sum(x6)
p_hat_2
logl_2 <- sum(x6*log(p_hat_2))
logl_2
G2 <- -2 * (logl_1 - logl_2)
G2
p_value_2 <- 1 - pchisq(G2,5)
p_value_2
p_obs <- x6/sum(x6)
p_binom <- dbinom(0:6,6,p_hat)
p_bb <- dbb(0:6,6,bb_6$alpha,bb_6$beta)
tab_6 <- tibble(
boys = 0:6,
`# families` = x6,
observed = round(p_obs,5),
binomial = round(p_binom,5),
`beta-binomial` = round(p_bb,5),
general = round(p_obs,5))
library(kableExtra)
kable(tab_6) %>%
kable_styling(
bootstrap_options = c("striped", "condensed"),
full_width = FALSE)
ggplot(tab_6) +
geom_segment(aes(x = boys + 0.1, y = general,
xend = boys + 0.1, yend = 0),
color = "red") +
geom_segment(aes(x = boys, y = binomial,
xend = boys, yend = 0),
data = tab_6, color = "blue") +
geom_segment(aes(x = boys - 0.1, y = `beta-binomial`,
xend = boys - 0.1, yend = 0),
data = tab_6, color = "green") +
scale_x_continuous(breaks = 0:6) +
ggtitle("Comparison Between Three Models",
subtitle = "general = red, binomial = blue, beta-binomial = green") +
xlab("# of boys") +
ylab("probability")
p_obs <- x6/sum(x6)
p_binom <- dbinom(0:6,6,p_hat)
p_bb <- dbb(0:6,6,bb_6$alpha,bb_6$beta)
tab_6 <- tibble(
boys = 0:6,
`# families` = x6,
observed = round(p_obs,5),
binomial = round(p_binom,5),
`beta-binomial` = round(p_bb,5),
general = round(p_obs,5))
library(kableExtra)
kable(tab_6) %>%
kable_styling(
bootstrap_options = c("striped", "condensed"),
full_width = FALSE)
p_obs <- x6/sum(x6)
p_binom <- dbinom(0:6,6,p_hat)
p_bb <- dbb(0:6,6,bb_6$alpha,bb_6$beta)
tab_6 <- tibble(
boys = 0:6,
`# families` = x6,
observed = round(p_obs,5),
binomial = round(p_binom,5),
`beta-binomial` = round(p_bb,5),
general = round(p_obs,5))
library(kableExtra)
kable(tab_6) %>%
kable_styling(
bootstrap_options = c("striped", "condensed"),
full_width = FALSE)
p_obs <- x6/sum(x6)
p_binom <- dbinom(0:6,6,p_hat)
p_bb <- dbb(0:6,6,bb_6$alpha,bb_6$beta)
tab_6 <- tibble(
boys = 0:6,
`# families` = x6,
observed = round(p_obs,5),
binomial = round(p_binom,5),
`beta-binomial` = round(p_bb,5),
general = round(p_obs,5))
library(kableExtra)
kable(tab_6) %>%
kable_styling(
bootstrap_options = c("striped", "condensed"),
full_width = FALSE)
p_obs <- x6/sum(x6)
p_binom <- dbinom(0:6,6,p_hat)
p_bb <- dbb(0:6,6,bb_6$alpha,bb_6$beta)
tab_6 <- tibble(
boys = 0:6,
`# families` = x6,
observed = round(p_obs,5),
binomial = round(p_binom,5),
`beta-binomial` = round(p_bb,5),
general = round(p_obs,5))
library(kableExtra)
kable(tab_6) %>%
kable_styling(
bootstrap_options = c("striped", "condensed"),
full_width = FALSE)
