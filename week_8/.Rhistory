set.seed(123)
n <- 90
p <- 0.25
N <- 1000 # Number of repetitions
captured_p <- rep(NA,N)
for(i in 1:N){
x <- rbinom(1, n, p)
p_hat <- x/n
se_wald <- binom_se(n,p_hat)
a_wald <- p_hat - qnorm(0.975)*se_wald
b_wald <- p_hat + qnorm(0.975)*se_wald
captured_p[i] <- ifelse(a_wald<=p & b_wald>=p, 1, 0)
}
## How many intervals captured our p?
sum(captured_p)
## What's our estimate for the capture probability?
mean(captured_p)
## Try running the above code a few more times (be sure to avoid the set.seed() command or you will keep getting the same answer)
## Try changing the value of N
set.seed(123)
n <- 90
p <- 0.25
N <- 1000 # Number of repetitions
captured_p <- rep(NA,N)
for(i in 1:N){
x <- rbinom(1, n, p)
p_hat <- x/n
se_wald <- binom_se(n,p_hat)
a_wald <- p_hat - qnorm(0.975)*se_wald
b_wald <- p_hat + qnorm(0.975)*se_wald
captured_p[i] <- ifelse(a_wald<=p & b_wald>=p, 1, 0)
}
## How many intervals captured our p?
sum(captured_p)
## What's our estimate for the capture probability?
mean(captured_p)
## Try running the above code a few more times (be sure to avoid the set.seed() command or you will keep getting the same answer)
## Try changing the value of N
set.seed(123)
n <- 90
p <- 0.25
N <- 1000 # Number of repetitions
captured_p <- rep(NA,N)
for(i in 1:N){
x <- rbinom(1, n, p)
p_hat <- x/n
se_wald <- binom_se(n,p_hat)
a_wald <- p_hat - qnorm(0.975)*se_wald
b_wald <- p_hat + qnorm(0.975)*se_wald
captured_p[i] <- ifelse(a_wald<=p & b_wald>=p, 1, 0)
}
## How many intervals captured our p?
sum(captured_p)
## What's our estimate for the capture probability?
mean(captured_p)
## Try running the above code a few more times (be sure to avoid the set.seed() command or you will keep getting the same answer)
## Try changing the value of N
set.seed(123)
n <- 90
p <- 0.25
N <- 1000 # Number of repetitions
captured_p <- rep(NA,N)
for(i in 1:N){
x <- rbinom(1, n, p)
p_hat <- x/n
se_wald <- binom_se(n,p_hat)
a_wald <- p_hat - qnorm(0.975)*se_wald
b_wald <- p_hat + qnorm(0.975)*se_wald
captured_p[i] <- ifelse(a_wald<=p & b_wald>=p, 1, 0)
}
## How many intervals captured our p?
sum(captured_p)
## What's our estimate for the capture probability?
mean(captured_p)
## Try running the above code a few more times (be sure to avoid the set.seed() command or you will keep getting the same answer)
## Try changing the value of N
set.seed(123)
n <- 90
p <- 0.25
N <- 1000 # Number of repetitions
captured_p <- rep(NA,N)
for(i in 1:N){
x <- rbinom(1, n, p)
p_hat <- x/n
se_wald <- binom_se(n,p_hat)
a_wald <- p_hat - qnorm(0.975)*se_wald
b_wald <- p_hat + qnorm(0.975)*se_wald
captured_p[i] <- ifelse(a_wald<=p & b_wald>=p, 1, 0)
}
set.seed(123)
n <- 90
p <- 0.25
N <- 1000 # Number of repetitions
captured_p <- rep(NA,N)
for(i in 1:N){
x <- rbinom(1, n, p)
p_hat <- x/n
se_wald <- binom_se(n,p_hat)
a_wald <- p_hat - qnorm(0.975)*se_wald
b_wald <- p_hat + qnorm(0.975)*se_wald
captured_p[i] <- ifelse(a_wald<=p & b_wald>=p, 1, 0)
set.seed(123)
n <- 90
p <- 0.25
N <- 1000 # Number of repetitions
captured_p <- rep(NA,N)
for(i in 1:N){
x <- rbinom(1, n, p)
p_hat <- x/n
se_wald <- binom_se(n,p_hat)
a_wald <- p_hat - qnorm(0.975)*se_wald
b_wald <- p_hat + qnorm(0.975)*se_wald
captured_p[i] <- ifelse(a_wald<=p & b_wald>=p, 1, 0)
}
set.seed(123)
n <- 90
p <- 0.25
N <- 1000 # Number of repetitions
captured_p <- rep(NA,N)
for(i in 1:N){
x <- rbinom(1, n, p)
p_hat <- x/n
se_wald <- binom_se(n,p_hat)
a_wald <- p_hat - qnorm(0.975)*se_wald
b_wald <- p_hat + qnorm(0.975)*se_wald
captured_p[i] <- ifelse(a_wald<=p & b_wald>=p, 1, 0)
set.seed(123)
n <- 90
p <- 0.25
N <- 1000 # Number of repetitions
captured_p <- rep(NA,N)
for(i in 1:N){
x <- rbinom(1, n, p)
p_hat <- x/n
se_wald <- binom_se(n,p_hat)
a_wald <- p_hat - qnorm(0.975)*se_wald
b_wald <- p_hat + qnorm(0.975)*se_wald
captured_p[i] <- ifelse(a_wald<=p & b_wald>=p, 1, 0)
}
## How many intervals captured our p?
sum(captured_p)
## What's our estimate for the capture probability?
mean(captured_p)
## Try running the above code a few more times (be sure to avoid the set.seed() command or you will keep getting the same answer)
## Try changing the value of N
set.seed(123)
n <- 90
p <- 0.25
N <- 1000 # Number of repetitions
captured_p <- rep(NA,N)
for(i in 1:N){
set.seed(123)
n <- 90
p <- 0.25
N <- 1000 # Number of repetitions
captured_p <- rep(NA,N)
for(i in 1:N){
x <- rbinom(1, n, p)
p_hat <- x/n
se_wald <- binom_se(n,p_hat)
a_wald <- p_hat - qnorm(0.975)*se_wald
b_wald <- p_hat + qnorm(0.975)*se_wald
captured_p[i] <- ifelse(a_wald<=p & b_wald>=p, 1, 0)
}
## How many intervals captured our p?
sum(captured_p)
## What's our estimate for the capture probability?
mean(captured_p)
## Try running the above code a few more times (be sure to avoid the set.seed() command or you will keep getting the same answer)
## Try changing the value of N
set.seed(96573)
N <- 1000000 # Number of repetitions
p <- 2/3
n <- 90
rx <- rbinom(N,n,p) # Large sample of Binomial(n,p) random variables
hist(rx)
df <- tibble(
n = rep(90,91),
x = 0:90,
p_hat = x/n,
p_tilde = (x+2)/(n+4),
se_wald = binom_se(n,p_hat),
se_agresti = binom_se(n+4,p_tilde),
a_wald = p_hat - qnorm(0.975)*se_wald,
b_wald = p_hat + qnorm(0.975)*se_wald,
a_agresti = p_tilde - qnorm(0.975)*se_agresti,
b_agresti = p_tilde + qnorm(0.975)*se_agresti
)
df_wald <- df %>%
filter(a_wald <= p & p <= b_wald) %>%
summarize(minx = min(x), maxx = max(x))
mean(rx >= df_wald$minx & rx <= df_wald$maxx)
df_agresti <- df %>%
filter(a_agresti <= p & p <= b_agresti) %>%
summarize(minx = min(x), maxx = max(x))
df_agresti
df_wald <- df %>%
filter(a_wald <= p & p <= b_wald) %>%
summarize(minx = min(x), maxx = max(x))
df_wald
df_agresti <- df %>%
filter(a_agresti <= p & p <= b_agresti) %>%
summarize(minx = min(x), maxx = max(x))
set.seed(96573)
N <- 1000000 # Number of repetitions
p <- 2/3
n <- 90
rx <- rbinom(N,n,p) # Large sample of Binomial(n,p) random variables
hist(rx)
## Consider all the possible observed values for X
## Calculate confidence intervals using the Wald and Agresti-Coull Methods
df <- tibble(
n = rep(90,91),
x = 0:90,
p_hat = x/n,
p_tilde = (x+2)/(n+4),
se_wald = binom_se(n,p_hat),
se_agresti = binom_se(n+4,p_tilde),
a_wald = p_hat - qnorm(0.975)*se_wald,
b_wald = p_hat + qnorm(0.975)*se_wald,
a_agresti = p_tilde - qnorm(0.975)*se_agresti,
b_agresti = p_tilde + qnorm(0.975)*se_agresti
)
## Find the range of Wald intervals that would capture our p = 2/3
df_wald <- df %>%
filter(a_wald <= p & p <= b_wald) %>%
summarize(minx = min(x), maxx = max(x))
## Estimated Wald coverage probability
mean(rx >= df_wald$minx & rx <= df_wald$maxx)
## Find the range of Agresti-Coull intervals that would capture our p = 2/3
df_agresti <- df %>%
filter(a_agresti <= p & p <= b_agresti) %>%
summarize(minx = min(x), maxx = max(x))
## Estimated Agresti-Coull coverage probability
mean(rx >= df_agresti$minx & rx <= df_agresti$maxx)
df_agresti
df_wald
mean(rx >= df_agresti$minx & rx <= df_agresti$maxx)
mean(rx >= df_wald$minx & rx <= df_wald$maxx)
## Calculate the coverage probability
calc_wald <- function(n,p,conf=0.95)
{
z <- qnorm(1 - (1-conf)/2)
df <- tibble(
x = 0:n,
d = dbinom(x,n,p), # we use dbinom instead of simulating with rbinom
calc_wald <- function(n,p,conf=0.95)
{
z <- qnorm(1 - (1-conf)/2)
df <- tibble(
x = 0:n,
d = dbinom(x,n,p), # we use dbinom instead of simulating with rbinom
p_hat = x/n,
se = sqrt( p_hat*(1-p_hat)/n ),
a = p_hat - z*se,
b = p_hat + z*se)
calc_wald <- function(n,p,conf=0.95)
{
z <- qnorm(1 - (1-conf)/2)
df <- tibble(
x = 0:n,
d = dbinom(x,n,p), # we use dbinom instead of simulating with rbinom
p_hat = x/n,
se = sqrt( p_hat*(1-p_hat)/n ),
a = p_hat - z*se,
b = p_hat + z*se)
prob <- df %>%
filter(a < p & p < b) %>%
summarize(prob = sum(d)) %>%
pull(prob)
return ( prob )
}
capture_wald <- function(n,seq_p,conf=0.95)
{
prob <- numeric(length(seq_p))
for ( i in 1:length(seq_p))
prob[i] <- calc_wald(n,seq_p[i],conf)
df <- tibble(p = seq_p,prob=prob)
return ( df )
}
plot_wald <- function(n,seq_p,conf=0.95,...)
{
capture_wald(90,seq(0.1,0.9,0.005)) %>%
ggplot(aes(x=p,y=prob)) +
geom_line(...) +
geom_hline(yintercept = conf, linetype = "dashed") +
ggtitle("Wald Method Capture Probability",
subtitle = paste("n = ",n)) +
theme_bw()
}
plot_wald(90,seq(0.1,0.9,length.out=501),conf=0.95,color="red")
## Calculate the coverage probability
calc_wald <- function(n,p,conf=0.95)
{
z <- qnorm(1 - (1-conf)/2)
df <- tibble(
x = 0:n,
d = dbinom(x,n,p), # we use dbinom instead of simulating with rbinom
p_hat = x/n,
se = sqrt( p_hat*(1-p_hat)/n ),
a = p_hat - z*se,
b = p_hat + z*se)
prob <- df %>%
filter(a < p & p < b) %>%
summarize(prob = sum(d)) %>%
pull(prob)
return ( prob )
}
capture_wald <- function(n,seq_p,conf=0.95)
{
prob <- numeric(length(seq_p))
for ( i in 1:length(seq_p))
prob[i] <- calc_wald(n,seq_p[i],conf)
df <- tibble(p = seq_p,prob=prob)
return ( df )
}
plot_wald <- function(n,seq_p,conf=0.95,...)
{
capture_wald(90,seq(0.1,0.9,0.005)) %>%
ggplot(aes(x=p,y=prob)) +
geom_line(...) +
geom_hline(yintercept = conf, linetype = "dashed") +
ggtitle("Wald Method Capture Probability",
subtitle = paste("n = ",n)) +
theme_bw()
}
plot_wald(90,seq(0.1,0.9,length.out=501),conf=0.95,color="red")
## Calculate the coverage probability
calc_wald <- function(n,p,conf=0.95)
{
z <- qnorm(1 - (1-conf)/2)
df <- tibble(
x = 0:n,
d = dbinom(x,n,p), # we use dbinom instead of simulating with rbinom
p_hat = x/n,
se = sqrt( p_hat*(1-p_hat)/n ),
a = p_hat - z*se,
b = p_hat + z*se)
prob <- df %>%
filter(a < p & p < b) %>%
summarize(prob = sum(d)) %>%
pull(prob)
return ( prob )
}
capture_wald <- function(n,seq_p,conf=0.95)
{
prob <- numeric(length(seq_p))
for ( i in 1:length(seq_p))
prob[i] <- calc_wald(n,seq_p[i],conf)
df <- tibble(p = seq_p,prob=prob)
return ( df )
}
plot_wald <- function(n,seq_p,conf=0.95,...)
{
capture_wald(90,seq(0.1,0.9,0.005)) %>%
ggplot(aes(x=p,y=prob)) +
geom_line(...) +
geom_hline(yintercept = conf, linetype = "dashed") +
ggtitle("Wald Method Capture Probability",
subtitle = paste("n = ",n)) +
theme_bw()
}
plot_wald(90,seq(0.1,0.9,length.out=501),conf=0.95,color="red")
calc_agresti <- function(n,p,conf=0.95)
{
z <- qnorm(1 - (1-conf)/2)
df <- tibble(
x = 0:n,
d = dbinom(x,n,p),
p_tilde = (x+2)/(n+4),
se = sqrt( p_tilde*(1-p_tilde)/(n+4) ),
a = p_tilde - z*se,
b = p_tilde + z*se)
prob <- df %>%
filter(a < p & p < b) %>%
summarize(prob = sum(d)) %>%
pull(prob)
return ( prob )
}
capture_agresti <- function(n,seq_p,conf=0.95)
{
prob <- numeric(length(seq_p))
for ( i in 1:length(seq_p))
prob[i] <- calc_agresti(n,seq_p[i],conf)
df <- tibble(p = seq_p,prob=prob)
return ( df )
}
plot_agresti <- function(n,seq_p,conf=0.95,...)
{
capture_agresti(90,seq(0.1,0.9,0.005)) %>%
ggplot(aes(x=p,y=prob)) +
geom_line(...) +
geom_hline(yintercept = conf, linetype = "dashed") +
ggtitle("Agresti-Coull Method Capture Probability",
subtitle = paste("n = ",n)) +
theme_bw()
}
plot_agresti(90,seq(0.1,0.9,length.out=501),conf=0.95,color="red")
n <- 90
p <- 2/3
gbinom(n, p)
set.seed(1234)
n <- 90
x <- rbinom(1,n,p=2/3)
df <- tibble(pseq=seq(0,1,by=.01), L=dbinom(x,n,pseq))
df
ggplot(df, aes(pseq, L)) +
geom_point() +
xlab("p") +
ylab("L(p | X=x)") +
ggtitle(paste0("L(p|X=",x,")")) +
geom_vline(xintercept=x/n, color="red",linetype="dashed")
set.seed(1234)
n <- 90
x <- rbinom(1,n,p=2/3) # generate an observed x
df <- tibble(pseq=seq(0,1,by=.01), L=dbinom(x,n,pseq))
ggplot(df, aes(pseq, L)) +
geom_point() +
xlab("p") +
ylab("L(p | X=x)") +
ggtitle(paste0("L(p|X=",x,")")) +
geom_vline(xintercept=x+2/n+4, color="red",linetype="dashed")
## Run this code a few more times (avoiding the set.seed)
## Try inputing a low value for x - what happens to the likelihood function?
set.seed(1234)
n <- 90
x <- rbinom(1,n,p=2/3) # generate an observed x
df <- tibble(pseq=seq(0,1,by=.01), L=dbinom(x,n,pseq))
ggplot(df, aes(pseq, L)) +
geom_point() +
xlab("p") +
ylab("L(p | X=x)") +
ggtitle(paste0("L(p|X=",x,")")) +
geom_vline(xintercept=x/n, color="red",linetype="dashed")
## Run this code a few more times (avoiding the set.seed)
## Try inputing a low value for x - what happens to the likelihood function?
x
x
set.seed(1234)
n <- 90
x <- rbinom(1,n,p=2/3) # generate an observed x
df <- tibble(pseq=seq(0,1,by=.01), L=dbinom(x,n,pseq))
ggplot(df, aes(pseq, L)) +
geom_point() +
xlab("p") +
ylab("L(p | X=x)") +
ggtitle(paste0("L(p|X=",x,")")) +
geom_vline(xintercept=x/n, color="red",linetype="dashed")
## Run this code a few more times (avoiding the set.seed)
## Try inputing a low value for x - what happens to the likelihood function?
set.seed(1234)
n <- 90
x <- rbinom(1,n,p=2/3) # generate an observed x
df <- tibble(pseq=seq(0,1,by=.01), L=dbinom(x,n,pseq))
ggplot(df, aes(pseq, L)) +
geom_point() +
xlab("p") +
ylab("L(p | X=x)") +
ggtitle(paste0("L(p|X=",x,")")) +
geom_vline(xintercept=x/n, color="red",linetype="dashed")
## Run this code a few more times (avoiding the set.seed)
## Try inputing a low value for x - what happens to the likelihood function?
set.seed(1234)
n <- 90
x <- rbinom(1,n,p=2/3) # generate an observed x
df <- tibble(pseq=seq(0,1,by=.01), L=dbinom(x,n,pseq))
ggplot(df, aes(pseq, L)) +
geom_point() +
xlab("p") +
ylab("L(p | X=x)") +
ggtitle(paste0("L(p|X=",x,")")) +
geom_vline(xintercept=x/n, color="red",linetype="dashed")
## Run this code a few more times (avoiding the set.seed)
## Try inputing a low value for x - what happens to the likelihood function?
set.seed(1234)
n <- 90
x <- rbinom(1,n,p=2/3) # generate an observed x
df <- tibble(pseq=seq(0,1,by=.01), L=dbinom(x,n,pseq))
ggplot(df, aes(pseq, L)) +
geom_point() +
xlab("p") +
ylab("L(p | X=x)") +
ggtitle(paste0("L(p|X=",x,")")) +
geom_vline(xintercept=x/n, color="red",linetype="dashed")
## Run this code a few more times (avoiding the set.seed)
## Try inputing a low value for x - what happens to the likelihood function?
set.seed(1234)
n <- 90
x <- rbinom(1,n,p=2/3) # generate an observed x
df <- tibble(pseq=seq(0,1,by=.01), L=dbinom(x,n,pseq))
ggplot(df, aes(pseq, L)) +
geom_point() +
xlab("p") +
ylab("L(p | X=x)") +
ggtitle(paste0("L(p|X=",x,")")) +
geom_vline(xintercept=x/n, color="red",linetype="dashed")
## Run this code a few more times (avoiding the set.seed)
## Try inputing a low value for x - what happens to the likelihood function?
x <- rbinom(1,n,p=2/3)
x
set.seed(1234)
n <- 90
x <- rbinom(1,n,p=2/3) # generate an observed x
df <- tibble(pseq=seq(0,1,by=.01), L=dbinom(x,n,pseq))
ggplot(df, aes(pseq, L)) +
geom_point() +
xlab("p") +
ylab("L(p | X=x)") +
ggtitle(paste0("L(p|X=",x,")")) +
geom_vline(xintercept=x/n, color="red",linetype="dashed")
## Run this code a few more times (avoiding the set.seed)
## Try inputing a low value for x - what happens to the likelihood function?
